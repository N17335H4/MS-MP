GRAPH THEORY
..

Types of graph
- undirected graph
- directed graph (u,v)
- weighted graph (u,v,w)

Special graphs
- tree - undirected graph with no cycles
- rooted tree
-- arborescence or in-tree - every edge points towards the root node designated
-- anti-arborescence or out-tree - every edge points away from the root node designated
- *Directed Acylic Graphs DAGs - directed graphs with no cycles. [important role in representing structures with dependencies. ex- shortest path, topological order] [all out-trees are DAGs but not all DAGs are out-trees]
- Bipartite graph - vertices can be split into 2 independent groups U, V, such that every edge connects between U and V [2 colourable; no odd length cycle] [people-jobs, network flow]
- complete graph Kn - there is a unique edge between every pair of nodes [worst case]

Representing graphs
- adjacency matrix [pros- space efficient for dense graphs, edge weight lookup is O(1), simplest; cons- requires O(Vsquare) space, iterating over all edges take O(Vsquare) time]
- adjacency list [pros- space efficient for sparse graphs, iterating over all edges is efficient; cons- less space efficient for denser graphs, edge weight lookup is O(E), slight more complex]
- edge list (u,v,w) [pros- space efficient for sparse graphs, iterating over all edges is efficient, simple; cons- less space efficient for denser graphs, edge weight lookup is O(E)]

Common graph theory problems:
Shortest path
- BFS, Dijkstra's, Bellman-Ford, Floyd-Warshall, A* ...
Connectivity [path between 2 nodes]
- search algo like DFS, union find DS
Negative cycles [trade-currency]
- Bellman-Ford, Floyd-Warshall
Strongly connected components [self-contained cycles within a directed graph where every vertex in a given cycle can reach every other vertex in the same cycle]
- Tarjan's and Kosaraju's algo
Traveling Salesman problem [shortest path that visits each node exactly once and returns to origin
- Held-Karp, branch and bound, many approximation algos]
Bridges [bridge / cut-edge is any edge whose removal increases the number of connected components]
Articulation points / cut-vertex is any vertex whose removal increases the number of connected components
Minimum Spanning tree [a subset of the edges of a connected, edge-weighted undirected graph that connects all the vertices together, without any cycles and with the minimum possible total edge weight] [least cost network, circuit design, transportation networks]
- Kruskal's algo, Prim's and Boruvka's algo, approximation algos
Network flow : max flow [number of cars on roads, volume of water flowing through pipes]
- Ford-Fulkerson, Edmond-Karp and Dinic's algo

DFS: run time complexity O(V+E) [can count connected components, determine connectivity, find bridges and articulation points && compute a graph's MST, detect and find cycles, check if bipartite, find strongly connected components, topologically sort the nodes, find augmenting paths in a flow network, generate mazes] 
pseudo code *2
- 

BFS: run time complexity O(V+E) [find shortest path on unweighted graph]
- queue
pseudo code

BFS shortest path on grid:
Grids are a form of implicit graphs because we can determine a node's neighbours based on our location within the grid.
A common approach to solve graph theory problems on grids is to first convert the grid into a familiar format such as adjacency lists/matrix. assume it to be unweighted. label [0,n) and then run algorithm to solvethe problems such as shortest path, connected components etc. However, transformations between graph representations can usually be avoided due to the structure of grid. 
pseudo code - direction vectors
Dungeon Problem Statement: shortest path to escape a dungeon. state representation - array or object wrapper or *using one queue for each dimension
- pseudo code

*Topological Sort [graph with directed edges where some events occur before others] [school class prerequisites, program dependencies, event scheduling, assembly instructions etc] O(V+E) time
- *topological orderings are not unique
- only directed acyclic graphs [since circular dependency can't have valid ordering]
- to verify there is no directed cycle, use Tarjan's strongly connected component algo
- topological ordering for a DAG: pick an unvisited node, apply DFS and visit all -> nodes, on recursive callback of DFS, add the current node to topological ordering in reverse order, pick another random unvisited node //+pseudo code

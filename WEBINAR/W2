GRAPH THEORY
..

Types of graph
- undirected graph
- directed graph (u,v)
- weighted graph (u,v,w)

Special graphs
- tree - undirected graph with no cycles
- rooted tree
-- arborescence or in-tree - every edge points towards the root node designated
-- anti-arborescence or out-tree - every edge points away from the root node designated
- *Directed Acylic Graphs DAGs - directed graphs with no cycles. [important role in representing structures with dependencies. ex- shortest path, topological order] [all out-trees are DAGs but not all DAGs are out-trees]
- Bipartite graph - vertices can be split into 2 independent groups U, V, such that every edge connects between U and V [2 colourable; no odd length cycle] [people-jobs, network flow]
- complete graph Kn - there is a unique edge between every pair of nodes [worst case]

Representing graphs
- adjacency matrix [pros- space efficient for dense graphs, edge weight lookup is O(1), simplest; cons- requires O(Vsquare) space, iterating over all edges take O(Vsquare) time]
- adjacency list [pros- space efficient for sparse graphs, iterating over all edges is efficient; cons- less space efficient for denser graphs, edge weight lookup is O(E), slight more complex]
- edge list (u,v,w) [pros- space efficient for sparse graphs, iterating over all edges is efficient, simple; cons- less space efficient for denser graphs, edge weight lookup is O(E)]

Common graph theory problems:
Shortest path
- BFS, Dijkstra's, Bellman-Ford, Floyd-Warshall, A* ...
Connectivity [path between 2 nodes]
- search algo like DFS, union find DS
Negative cycles [trade-currency]
- Bellman-Ford, Floyd-Warshall
Strongly connected components [self-contained cycles within a directed graph where every vertex in a given cycle can reach every other vertex in the same cycle]
- Tarjan's and Kosaraju's algo
Traveling Salesman problem [shortest path that visits each node exactly once and returns to origin
- Held-Karp, branch and bound, many approximation algos]
Bridges [bridge / cut-edge is any edge whose removal increases the number of connected components]
Articulation points / cut-vertex is any vertex whose removal increases the number of connected components
Minimum Spanning tree
